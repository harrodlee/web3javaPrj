package com.xq.okexchain;

import org.web3j.crypto.*;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.http.HttpService;
import org.web3j.utils.Numeric;
import java.io.IOException;
import java.math.BigInteger;
import java.util.concurrent.ExecutionException;

public class ContractDeploy {
    public static void main(String[]args) throws IOException, CipherException, ExecutionException, InterruptedException {

        String url="https://exchaintestrpc.okex.org";
        Web3j web3j = Web3j.build(new HttpService(url));
        String privateKey="95aae605123650c0ce90c3c5823d9ea19f27f575fb5eff97da4ae0cf59b14e37";
        //发送方地址
        String from = "0x36887B5A431d3f424c1918Db8fF3D2708Ec606E8";
        String data="60806040523480156100115760006000fd5b5060405161056f38038061056f833981810160405260208110156100355760006000fd5b81019080805160405193929190846401000000008211156100565760006000fd5b8382019150602082018581111561006d5760006000fd5b825186602082028301116401000000008211171561008b5760006000fd5b8083526020830192505050908051906020019060200280838360005b838110156100c35780820151818401525b6020810190506100a7565b505050509050016040526020015050505b80600160005090805190602001906100ed9291906100f5565b505b50610176565b82805482825590600052602060002090810192821561013a579160200282015b82811115610139578251826000509060001916905591602001919060010190610115565b5b509050610147919061014b565b5090565b6101739190610155565b8082111561016f5760008181506000905550600101610155565b5090565b90565b6103ea806101856000396000f3fe60806040523480156100115760006000fd5b506004361061005c5760003560e01c80632b38cd96146100625780633477ee2e146100af57806335154986146100fa578063392e66781461012d578063b1347908146101785761005c565b60006000fd5b610093600480360360208110156100795760006000fd5b8101908080356000191690602001909291905050506101c5565b604051808260ff1660ff16815260200191505060405180910390f35b6100dc600480360360208110156100c65760006000fd5b81019080803590602001909291905050506101ea565b60405180826000191660001916815260200191505060405180910390f35b61012b600480360360208110156101115760006000fd5b810190808035600019169060200190929190505050610212565b005b61015e600480360360208110156101445760006000fd5b8101908080356000191690602001909291905050506102ee565b604051808215151515815260200191505060405180910390f35b6101a96004803603602081101561018f5760006000fd5b81019080803560001916906020019092919050505061035f565b604051808260ff1660ff16815260200191505060405180910390f35b600060005060205280600052604060002060009150909054906101000a900460ff1681565b6001600050818154811015156101fc57fe5b906000526020600020900160005b915090505481565b610221816102ee63ffffffff16565b151561022d5760006000fd5b600160006000506000836000191660001916815260200190815260200160002060008282829054906101000a900460ff160192506101000a81548160ff021916908360ff1602179055507fc1eff9d9e2ab8a2b29706e0c2818cd78972e60f1ce84c268a77005b0bece97c43382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a15b50565b60006000600090505b60016000508054905081101561035057826000191660016000508281548110151561031e57fe5b906000526020600020900160005b505460001916141561034257600191505061035a565b5b80806001019150506102f7565b506000905061035a565b919050565b6000610370826102ee63ffffffff16565b151561037c5760006000fd5b60006000506000836000191660001916815260200190815260200160002060009054906101000a900460ff1690506103af565b91905056fea264697066735822122018513bae31d4e0b7e46681e9695ea07fe00d2d986ddf528374a3fed208c42ba764736f6c6343000600003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003426f620000000000000000000000000000000000000000000000000000000000546f6d00000000000000000000000000000000000000000000000000000000004a65727279000000000000000000000000000000000000000000000000000000";
        BigInteger nonce = web3j.ethGetTransactionCount(from,DefaultBlockParameterName.PENDING).send().getTransactionCount();
        //支付的矿工费
        BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();
        System.out.println(gasPrice);
        BigInteger gasLimit = new BigInteger("30000000");
        RawTransaction rt=RawTransaction.createContractTransaction(
                nonce,
                gasPrice,
                gasLimit,
                BigInteger.ZERO,
                data);
        Credentials credentials = Credentials.create(privateKey);
        byte[] signMessage = TransactionEncoder.signMessage(rt, credentials);
        String hash = web3j.ethSendRawTransaction(Numeric.toHexString(signMessage)).sendAsync().get().getTransactionHash();
        System.out.println("hash:" + hash);
    }
}
